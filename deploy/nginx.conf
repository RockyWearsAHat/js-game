worker_processes 1;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name opposed.io www.opposed.io;

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name opposed.io www.opposed.io;

        # IMPORTANT: These paths will be managed by Let's Encrypt's Certbot
        ssl_certificate /etc/letsencrypt/live/opposed.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/opposed.io/privkey.pem;

        root /home/ec2-user/game-server/dist;
        index index.html;

        # Location for the WebSocket server
        location / {
            # First, try to serve the file as is. If it's a directory, look for an index file.
            # If that fails, it's likely a WebSocket upgrade request, so pass it to the backend.
            try_files $uri $uri/ @backend;
        }

        location @backend {
            proxy_pass http://127.0.0.1:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
